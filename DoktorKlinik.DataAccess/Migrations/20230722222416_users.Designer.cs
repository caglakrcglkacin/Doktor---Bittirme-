// <auto-generated />
using System;
using DoktorKlinik.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoktorKlinik.DataAccess.Migrations
{
    [DbContext(typeof(TourContext))]
    [Migration("20230722222416_users")]
    partial class users
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DoktorKlinik.Domain.Bölüm.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Part", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " Endodonti"
                        },
                        new
                        {
                            Id = 2,
                            Name = " Periodontoloji"
                        },
                        new
                        {
                            Id = 6,
                            Name = " ‌Protez "
                        },
                        new
                        {
                            Id = 3,
                            Name = " Ağız ve Çene Cerrahisi"
                        },
                        new
                        {
                            Id = 4,
                            Name = " ‌İmplantoloji "
                        },
                        new
                        {
                            Id = 5,
                            Name = " Estetik Diş Hekimliği"
                        },
                        new
                        {
                            Id = 7,
                            Name = " Ortodonti "
                        });
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Country.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Adana"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Adıyaman"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Afyon"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "Ağrı"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Aksaray"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "Amasya"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Name = "Antalya"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Name = "Ardahan"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Name = "Artvin"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            Name = "Aydın"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            Name = "Balıkesir"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 1,
                            Name = "Bartın"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 1,
                            Name = "Batman"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 1,
                            Name = "Bayburt"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 1,
                            Name = "Bilecik"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 1,
                            Name = "Bingöl"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 1,
                            Name = "Bitlis"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 1,
                            Name = "Bolu"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 1,
                            Name = "Burdur"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 1,
                            Name = "Bursa"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 1,
                            Name = "Çanakkale"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 1,
                            Name = "Çankırı"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 1,
                            Name = "Çorum"
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 1,
                            Name = "Denizli"
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 1,
                            Name = "Diyarbakır"
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 1,
                            Name = "Düzce"
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 1,
                            Name = "Edirne"
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 1,
                            Name = "Elazığ"
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 1,
                            Name = "Erzincan"
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 1,
                            Name = "Erzurum"
                        },
                        new
                        {
                            Id = 32,
                            CountryId = 1,
                            Name = "Eskişehir"
                        },
                        new
                        {
                            Id = 33,
                            CountryId = 1,
                            Name = "Gaziantep"
                        },
                        new
                        {
                            Id = 34,
                            CountryId = 1,
                            Name = "Giresun"
                        },
                        new
                        {
                            Id = 35,
                            CountryId = 1,
                            Name = "Gümüşhane"
                        },
                        new
                        {
                            Id = 36,
                            CountryId = 1,
                            Name = "Hakkari"
                        },
                        new
                        {
                            Id = 37,
                            CountryId = 1,
                            Name = "Hatay"
                        },
                        new
                        {
                            Id = 38,
                            CountryId = 1,
                            Name = "Iğdır"
                        },
                        new
                        {
                            Id = 39,
                            CountryId = 1,
                            Name = "Isparta"
                        },
                        new
                        {
                            Id = 40,
                            CountryId = 1,
                            Name = "İstanbul"
                        },
                        new
                        {
                            Id = 41,
                            CountryId = 1,
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = 42,
                            CountryId = 1,
                            Name = "Kahramanmaraş"
                        },
                        new
                        {
                            Id = 43,
                            CountryId = 1,
                            Name = "Karabük"
                        },
                        new
                        {
                            Id = 44,
                            CountryId = 1,
                            Name = "Karaman"
                        },
                        new
                        {
                            Id = 45,
                            CountryId = 1,
                            Name = "Kars"
                        },
                        new
                        {
                            Id = 46,
                            CountryId = 1,
                            Name = "Kastamonu"
                        },
                        new
                        {
                            Id = 47,
                            CountryId = 1,
                            Name = "Kayseri"
                        },
                        new
                        {
                            Id = 48,
                            CountryId = 1,
                            Name = "Kırıkkale"
                        },
                        new
                        {
                            Id = 49,
                            CountryId = 1,
                            Name = "Kırklareli"
                        },
                        new
                        {
                            Id = 50,
                            CountryId = 1,
                            Name = "Kırşehir"
                        },
                        new
                        {
                            Id = 51,
                            CountryId = 1,
                            Name = "Kilis"
                        },
                        new
                        {
                            Id = 52,
                            CountryId = 1,
                            Name = "Kocaeli"
                        },
                        new
                        {
                            Id = 53,
                            CountryId = 1,
                            Name = "Konya"
                        },
                        new
                        {
                            Id = 54,
                            CountryId = 1,
                            Name = "Kütahya"
                        },
                        new
                        {
                            Id = 55,
                            CountryId = 1,
                            Name = "Malatya"
                        },
                        new
                        {
                            Id = 56,
                            CountryId = 1,
                            Name = "Manisa"
                        },
                        new
                        {
                            Id = 57,
                            CountryId = 1,
                            Name = "Mardin"
                        },
                        new
                        {
                            Id = 58,
                            CountryId = 1,
                            Name = "Mersin"
                        },
                        new
                        {
                            Id = 59,
                            CountryId = 1,
                            Name = "Muğla"
                        },
                        new
                        {
                            Id = 60,
                            CountryId = 1,
                            Name = "Muş"
                        },
                        new
                        {
                            Id = 61,
                            CountryId = 1,
                            Name = "Nevşehir"
                        },
                        new
                        {
                            Id = 62,
                            CountryId = 1,
                            Name = "Niğde"
                        },
                        new
                        {
                            Id = 63,
                            CountryId = 1,
                            Name = "Ordu"
                        },
                        new
                        {
                            Id = 64,
                            CountryId = 1,
                            Name = "Osmaniye"
                        },
                        new
                        {
                            Id = 65,
                            CountryId = 1,
                            Name = "Rize"
                        },
                        new
                        {
                            Id = 66,
                            CountryId = 1,
                            Name = "Sakarya"
                        },
                        new
                        {
                            Id = 67,
                            CountryId = 1,
                            Name = "Samsun"
                        },
                        new
                        {
                            Id = 68,
                            CountryId = 1,
                            Name = "Siirt"
                        },
                        new
                        {
                            Id = 69,
                            CountryId = 1,
                            Name = "Sinop"
                        },
                        new
                        {
                            Id = 70,
                            CountryId = 1,
                            Name = "Sivas"
                        },
                        new
                        {
                            Id = 71,
                            CountryId = 1,
                            Name = "Şanlıurfa"
                        },
                        new
                        {
                            Id = 72,
                            CountryId = 1,
                            Name = "Şırnak"
                        },
                        new
                        {
                            Id = 73,
                            CountryId = 1,
                            Name = "Tekirdağ"
                        },
                        new
                        {
                            Id = 74,
                            CountryId = 1,
                            Name = "Tokat"
                        },
                        new
                        {
                            Id = 75,
                            CountryId = 1,
                            Name = "Trabzon"
                        },
                        new
                        {
                            Id = 76,
                            CountryId = 1,
                            Name = "Tunceli"
                        },
                        new
                        {
                            Id = 77,
                            CountryId = 1,
                            Name = "Uşak"
                        },
                        new
                        {
                            Id = 78,
                            CountryId = 1,
                            Name = "Van"
                        },
                        new
                        {
                            Id = 79,
                            CountryId = 1,
                            Name = "Yalova"
                        },
                        new
                        {
                            Id = 80,
                            CountryId = 1,
                            Name = "Yozgat"
                        },
                        new
                        {
                            Id = 81,
                            CountryId = 1,
                            Name = "Zonguldak"
                        });
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Country.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 18,
                            Name = " AFGANİSTAN"
                        },
                        new
                        {
                            Id = 2,
                            Name = " ALMANYA"
                        },
                        new
                        {
                            Id = 3,
                            Name = " AMERİKA BİRLEŞİK DEVLETLERİ"
                        },
                        new
                        {
                            Id = 4,
                            Name = " AMERİKAN SAMOASI (ABD)"
                        },
                        new
                        {
                            Id = 5,
                            Name = " ANDORRA"
                        },
                        new
                        {
                            Id = 6,
                            Name = " ANGOLA"
                        },
                        new
                        {
                            Id = 7,
                            Name = "  ANGUİLLA (Birleşik Krallık)"
                        },
                        new
                        {
                            Id = 8,
                            Name = " ANTİGUA ve BARBUDA"
                        },
                        new
                        {
                            Id = 9,
                            Name = " ARJANTİN"
                        },
                        new
                        {
                            Id = 10,
                            Name = "  ARNAVUTLUK"
                        },
                        new
                        {
                            Id = 11,
                            Name = " ARUBA (Hollanda)"
                        },
                        new
                        {
                            Id = 12,
                            Name = "  AVUSTRALYA"
                        },
                        new
                        {
                            Id = 13,
                            Name = " AZERBAYCAN"
                        },
                        new
                        {
                            Id = 14,
                            Name = " BELÇİKA"
                        },
                        new
                        {
                            Id = 15,
                            Name = "  BULGARİSTAN"
                        },
                        new
                        {
                            Id = 1,
                            Name = " TÜRKİYE"
                        },
                        new
                        {
                            Id = 16,
                            Name = " Çin"
                        },
                        new
                        {
                            Id = 17,
                            Name = "  Yunanistan"
                        },
                        new
                        {
                            Id = 19,
                            Name = " Rusya"
                        },
                        new
                        {
                            Id = 20,
                            Name = " İtalya"
                        });
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Randevu.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOnly")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeOnly")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PartId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Randevu.AppointmentGet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("AppointmentGet", (string)null);
                });

            modelBuilder.Entity("DoktorKlinik.Domain.User.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BolumId")
                        .HasColumnType("int");

                    b.Property<int>("KlinikUserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BolumId");

                    b.HasIndex("KlinikUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("DoktorKlinik.Domain.User.KlinikRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "d5f1afaa-13c4-4ef7-a17f-c896aa8fb8ea",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "1eba838f-706c-4317-ae83-ada1ebf87af1",
                            Name = "Doktor",
                            NormalizedName = "DOKTOR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "ea336a44-e8a7-4eb0-8cf0-2ce517db4fcd",
                            Name = "Hasta",
                            NormalizedName = "HASTA"
                        });
                });

            modelBuilder.Entity("DoktorKlinik.Domain.User.KlinikUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("GenderCode")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DoktorKlinik.Domain.User.Patients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("KlinikId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KlinikId");

                    b.HasIndex("RoleId");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Yorum.DoctorComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("DoctorComment", (string)null);
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Yorum.PatientInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("PatientInfo", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Country.City", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.Country.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Randevu.Appointment", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.User.Doctor", "Doctors")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoktorKlinik.Domain.Bölüm.Part", "Bolum")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bolum");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Randevu.AppointmentGet", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.Randevu.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoktorKlinik.Domain.User.Patients", "Hasta")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Hasta");
                });

            modelBuilder.Entity("DoktorKlinik.Domain.User.Doctor", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.Bölüm.Part", "Bolum")
                        .WithMany()
                        .HasForeignKey("BolumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoktorKlinik.Domain.User.KlinikUser", "KlinikUser")
                        .WithMany()
                        .HasForeignKey("KlinikUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoktorKlinik.Domain.User.KlinikRole", "klinikRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bolum");

                    b.Navigation("KlinikUser");

                    b.Navigation("klinikRole");
                });

            modelBuilder.Entity("DoktorKlinik.Domain.User.Patients", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.User.KlinikUser", "KlinikUser")
                        .WithMany()
                        .HasForeignKey("KlinikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoktorKlinik.Domain.User.KlinikRole", "KlinikRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KlinikRole");

                    b.Navigation("KlinikUser");
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Yorum.DoctorComment", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.Randevu.AppointmentGet", "AppointmentGet")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppointmentGet");
                });

            modelBuilder.Entity("DoktorKlinik.Domain.Yorum.PatientInfo", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.Randevu.AppointmentGet", "AppointmentGet")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppointmentGet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.User.KlinikRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.User.KlinikUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.User.KlinikUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.User.KlinikRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoktorKlinik.Domain.User.KlinikUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DoktorKlinik.Domain.User.KlinikUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
